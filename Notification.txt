const { Expo } = require('expo-server-sdk')


const notification = async ({ body }) => {
  try {
    if (body) {
      let expo = new Expo({ accessToken: process.env.EXPO_ACCESS_TOKEN })

      let messages = []

      let pushToken = 'ExponentPushToken[AMlurwOC2kmRul24H8LrNM]'
      messages.push({
        to: pushToken,
        sound: 'default',
        title: body.title,
        body: body.body,
        data: { withSome: 'data' }
      })

      let chunks = expo.chunkPushNotifications(messages)
      let tickets = []
      ;(async () => {
        for (let chunk of chunks) {
          try {
            let ticketChunk = await expo.sendPushNotificationsAsync(chunk)
            console.log(ticketChunk)
            tickets.push(...ticketChunk)
          } catch (error) {
            console.error(error)
          }
        }
      })()

      let receiptIds = []
      for (let ticket of tickets) {
        if (ticket.id) {
          receiptIds.push(ticket.id)
        }
      }

      let receiptIdChunks = expo.chunkPushNotificationReceiptIds(receiptIds)
      ;(async () => {
        for (let chunk of receiptIdChunks) {
          try {
            let receipts = await expo.getPushNotificationReceiptsAsync(chunk)
            console.log(receipts)

            for (let receiptId in receipts) {
              let { status, message, details } = receipts[receiptId]
              if (status === 'ok') {
                continue
              } else if (status === 'error') {
                console.error(
                  `There was an error sending a notification: ${message}`
                )
                if (details && details.error) {
                  console.error(`The error code is ${details.error}`)
                }
              }
            }
          } catch (error) {
            console.error(error)
          }
        }
      })()
    }
  } catch (error) {
    console.log(error)
    throw error
  }
}